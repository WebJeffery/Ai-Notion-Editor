/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { Editor } from "@tiptap/core";
export { Editor } from "@tiptap/core";
export namespace Components {
    interface SwcEditorContainer {
        "editor": Editor;
        "editorStore": any;
    }
    interface SwcEditorContent {
        "editor": Editor;
    }
    interface SwcEditorToolbar {
    }
}
export interface SwcEditorContainerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSwcEditorContainerElement;
}
declare global {
    interface HTMLSwcEditorContainerElementEventMap {
        "editorInitialized": any;
    }
    interface HTMLSwcEditorContainerElement extends Components.SwcEditorContainer, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSwcEditorContainerElementEventMap>(type: K, listener: (this: HTMLSwcEditorContainerElement, ev: SwcEditorContainerCustomEvent<HTMLSwcEditorContainerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSwcEditorContainerElementEventMap>(type: K, listener: (this: HTMLSwcEditorContainerElement, ev: SwcEditorContainerCustomEvent<HTMLSwcEditorContainerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSwcEditorContainerElement: {
        prototype: HTMLSwcEditorContainerElement;
        new (): HTMLSwcEditorContainerElement;
    };
    interface HTMLSwcEditorContentElement extends Components.SwcEditorContent, HTMLStencilElement {
    }
    var HTMLSwcEditorContentElement: {
        prototype: HTMLSwcEditorContentElement;
        new (): HTMLSwcEditorContentElement;
    };
    interface HTMLSwcEditorToolbarElement extends Components.SwcEditorToolbar, HTMLStencilElement {
    }
    var HTMLSwcEditorToolbarElement: {
        prototype: HTMLSwcEditorToolbarElement;
        new (): HTMLSwcEditorToolbarElement;
    };
    interface HTMLElementTagNameMap {
        "swc-editor-container": HTMLSwcEditorContainerElement;
        "swc-editor-content": HTMLSwcEditorContentElement;
        "swc-editor-toolbar": HTMLSwcEditorToolbarElement;
    }
}
declare namespace LocalJSX {
    interface SwcEditorContainer {
        "editor": Editor;
        "editorStore": any;
        "onEditorInitialized"?: (event: SwcEditorContainerCustomEvent<any>) => void;
    }
    interface SwcEditorContent {
        "editor"?: Editor;
    }
    interface SwcEditorToolbar {
    }
    interface IntrinsicElements {
        "swc-editor-container": SwcEditorContainer;
        "swc-editor-content": SwcEditorContent;
        "swc-editor-toolbar": SwcEditorToolbar;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "swc-editor-container": LocalJSX.SwcEditorContainer & JSXBase.HTMLAttributes<HTMLSwcEditorContainerElement>;
            "swc-editor-content": LocalJSX.SwcEditorContent & JSXBase.HTMLAttributes<HTMLSwcEditorContentElement>;
            "swc-editor-toolbar": LocalJSX.SwcEditorToolbar & JSXBase.HTMLAttributes<HTMLSwcEditorToolbarElement>;
        }
    }
}
